#ifndef Pds_MasterFIFOHandler_hh
#define Pds_MasterFIFOHandler_hh

#include <vector>
#include <time.h>

#include "pds/evgr/EvrFIFOHandler.hh"

/*
 * Signal handler, for processing the incoming event codes, and providing interfaces for
 *   retrieving L1 data from the L1Xmitter object
 * The Master EVR process is indicated by L1Xmitter::enable.  The master is responsible
 * for sending the EvrDatagram to the other segment levels, generating the sw triggers,
 * adding the FIFO data to the L1Accept datagram, and counting events for calibration cycles.
 * All EVR processes configure the
 * EVRs to generate hardware triggers.  The slave EVR processes only need verify that
 * their FIFO data matches the timestamp of the L1Accept generated by the master.
 */

#include "pds/service/Client.hh"
#include "pds/service/Ins.hh"
#include "pds/utility/ToNetEb.hh"
#include "pds/evgr/EvrL1Data.hh"
#include "pds/evgr/EventState.hh"

namespace Pds {

  class Evr;
  class Appliance;
  class Src;
  class FIFOEvent;
  class InDatagram;
  class Task;
  class Transition;
  class EvrFifoServer;
  class EvrTimer;
  class VmonEvr;

  class MasterFIFOHandler : public EvrFIFOHandler {
  public:
    MasterFIFOHandler(Evr&,
                      const Src&,
                      Appliance&,
                      EvrFifoServer&,
                      unsigned partition,
                      int      iMaxGroup,
                      unsigned module,
                      unsigned neventnodes,
                      bool     randomize,
                      Task*    task,
                      VmonEvr& vmon);
    virtual ~MasterFIFOHandler();
  public:
    ///  EvrFIFOHandler interface
    virtual void        fifo_full   ();
    ///  Attach FIFO data to event datagram
    virtual InDatagram* l1accept    (InDatagram*);
    ///  Enable FIFO event reception
    virtual Transition* enable      (Transition*);
    ///
    virtual Transition* config      (Transition*); // config action
    ///
    virtual Transition* endcalib    (Transition*);
    ///  Configure FIFO event handling
    virtual void        set_config  (const EvrConfigType*);
    ///  Cancel FIFO event handling
    virtual void        release_sync();
  protected:
    ///  Is FIFO event handling enabled?
    bool                enabled     (const FIFOEvent&);
  private:
    unsigned int          uFiducialPrev; // public data for checking fiducial increasing steps
    bool                  bShowFirstFiducial;
    bool                  bShowFiducial;
    unsigned int          uNumBeginCalibCycle; // debug info
    bool                  bEnabled;      // partition in Enabled state
  protected:
    ///  EVR hardware access
    Evr &                 _er;
    unsigned              _module;
    ///  Appliance for posting occurrences/transitions to the stream (async)
    Appliance&            _app;
  private:
    ///  Notify eventbuilder of new readout event
    EvrFifoServer&        _srv;
    ///  Timer for calib cycle duration
    EvrTimer*             _done;
  protected:
    ///  Network output driver
    Client                _outlet;
  private:
    ///  Network destination for each readout group
    //Ins                   _dst0;
    std::vector<Ins>      _ldst;
    ///  Outdated software trigger service
    ToNetEb               _swtrig_out;
    Ins                   _swtrig_dst;
    ///  DetInfo for this EVR
    const Src&            _src;
    ///  Cache for FIFO data after latched by readout event
    EvrL1Data             _data;
  protected:
    ///  Accumulated state of FIFO events
    EventState            _state;
  private:
    ///  Current event number
    unsigned              _evtCounter;
    ///  Event number per readout group
    std::vector<unsigned> _lSegEvtCounter;
    ///  Event number to stop at
    unsigned              _evtStop;
    ///  Highest numbered readout group
    int                   _iMaxGroup;
    ///  Track latest fiducial for incomplete event stream
    unsigned              _lastFiducial;
    /// Event rate tracking
    timespec              _thisTime;
    timespec              _lastTime;
    /// Vector randomization
    enum { MAX_NODES=32 };
    unsigned              _nnodes;
    bool                  _randomize_nodes;
    int                   _vector[MAX_NODES];
    // 
    bool                  _validateFiducial;
    bool                  _full;
  protected:
    void startL1Accept(const FIFOEvent& fe, bool bEvrDataIncomplete);
    void validateFiducial(bool);
  private:
    int  getL1Data(const ClockTime&, const EvrDataType* & pEvrData, bool& bOutOfOrder);
    void releaseL1Data();

    void nextEnable();
    void clear();
    void reset();

  private:
    VmonEvr& _vmon;
  };
};

#endif
